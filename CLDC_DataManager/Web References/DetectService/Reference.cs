//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace CLDC_DataManager.DetectService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DetectServiceHttpBinding", Namespace="http://webservice.mpac.nari.com")]
    public partial class DetectService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getSealInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback uploadLabelOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendCtrlTaskFinishFlagOperationCompleted;
        
        private System.Threading.SendOrPostCallback uploadSealsCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendTaskFinishFlagOperationCompleted;
        
        private System.Threading.SendOrPostCallback applyAssistEquipOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDETedTestDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback setResultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMachineHandInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback applyEquipOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDBConnInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback equipCheckInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback boxCheckInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback upBoxInputPileDetOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAlarmOperationCompleted;
        
        private System.Threading.SendOrPostCallback uploadPackInfoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DetectService() {
            this.Url = global::CLDC_DataManager.Properties.Settings.Default.ClDataManager_DetectService_DetectService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getSealInfoCompletedEventHandler getSealInfoCompleted;
        
        /// <remarks/>
        public event uploadLabelCompletedEventHandler uploadLabelCompleted;
        
        /// <remarks/>
        public event sendCtrlTaskFinishFlagCompletedEventHandler sendCtrlTaskFinishFlagCompleted;
        
        /// <remarks/>
        public event uploadSealsCodeCompletedEventHandler uploadSealsCodeCompleted;
        
        /// <remarks/>
        public event sendTaskFinishFlagCompletedEventHandler sendTaskFinishFlagCompleted;
        
        /// <remarks/>
        public event applyAssistEquipCompletedEventHandler applyAssistEquipCompleted;
        
        /// <remarks/>
        public event getDETedTestDataCompletedEventHandler getDETedTestDataCompleted;
        
        /// <remarks/>
        public event setResultsCompletedEventHandler setResultsCompleted;
        
        /// <remarks/>
        public event getMachineHandInfoCompletedEventHandler getMachineHandInfoCompleted;
        
        /// <remarks/>
        public event applyEquipCompletedEventHandler applyEquipCompleted;
        
        /// <remarks/>
        public event getDBConnInfoCompletedEventHandler getDBConnInfoCompleted;
        
        /// <remarks/>
        public event equipCheckInfoCompletedEventHandler equipCheckInfoCompleted;
        
        /// <remarks/>
        public event boxCheckInfoCompletedEventHandler boxCheckInfoCompleted;
        
        /// <remarks/>
        public event upBoxInputPileDetCompletedEventHandler upBoxInputPileDetCompleted;
        
        /// <remarks/>
        public event getAlarmCompletedEventHandler getAlarmCompleted;
        
        /// <remarks/>
        public event uploadPackInfoCompletedEventHandler uploadPackInfoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.mpac.nari.com", ResponseNamespace="http://webservice.mpac.nari.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string getSealInfo([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("getSealInfo", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getSealInfoAsync(string in0) {
            this.getSealInfoAsync(in0, null);
        }
        
        /// <remarks/>
        public void getSealInfoAsync(string in0, object userState) {
            if ((this.getSealInfoOperationCompleted == null)) {
                this.getSealInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSealInfoOperationCompleted);
            }
            this.InvokeAsync("getSealInfo", new object[] {
                        in0}, this.getSealInfoOperationCompleted, userState);
        }
        
        private void OngetSealInfoOperationCompleted(object arg) {
            if ((this.getSealInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSealInfoCompleted(this, new getSealInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.mpac.nari.com", ResponseNamespace="http://webservice.mpac.nari.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string uploadLabel([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("uploadLabel", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void uploadLabelAsync(string in0) {
            this.uploadLabelAsync(in0, null);
        }
        
        /// <remarks/>
        public void uploadLabelAsync(string in0, object userState) {
            if ((this.uploadLabelOperationCompleted == null)) {
                this.uploadLabelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnuploadLabelOperationCompleted);
            }
            this.InvokeAsync("uploadLabel", new object[] {
                        in0}, this.uploadLabelOperationCompleted, userState);
        }
        
        private void OnuploadLabelOperationCompleted(object arg) {
            if ((this.uploadLabelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.uploadLabelCompleted(this, new uploadLabelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.mpac.nari.com", ResponseNamespace="http://webservice.mpac.nari.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string sendCtrlTaskFinishFlag([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("sendCtrlTaskFinishFlag", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sendCtrlTaskFinishFlagAsync(string in0) {
            this.sendCtrlTaskFinishFlagAsync(in0, null);
        }
        
        /// <remarks/>
        public void sendCtrlTaskFinishFlagAsync(string in0, object userState) {
            if ((this.sendCtrlTaskFinishFlagOperationCompleted == null)) {
                this.sendCtrlTaskFinishFlagOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendCtrlTaskFinishFlagOperationCompleted);
            }
            this.InvokeAsync("sendCtrlTaskFinishFlag", new object[] {
                        in0}, this.sendCtrlTaskFinishFlagOperationCompleted, userState);
        }
        
        private void OnsendCtrlTaskFinishFlagOperationCompleted(object arg) {
            if ((this.sendCtrlTaskFinishFlagCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendCtrlTaskFinishFlagCompleted(this, new sendCtrlTaskFinishFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.mpac.nari.com", ResponseNamespace="http://webservice.mpac.nari.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string uploadSealsCode([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("uploadSealsCode", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void uploadSealsCodeAsync(string in0) {
            this.uploadSealsCodeAsync(in0, null);
        }
        
        /// <remarks/>
        public void uploadSealsCodeAsync(string in0, object userState) {
            if ((this.uploadSealsCodeOperationCompleted == null)) {
                this.uploadSealsCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnuploadSealsCodeOperationCompleted);
            }
            this.InvokeAsync("uploadSealsCode", new object[] {
                        in0}, this.uploadSealsCodeOperationCompleted, userState);
        }
        
        private void OnuploadSealsCodeOperationCompleted(object arg) {
            if ((this.uploadSealsCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.uploadSealsCodeCompleted(this, new uploadSealsCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.mpac.nari.com", ResponseNamespace="http://webservice.mpac.nari.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string sendTaskFinishFlag([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("sendTaskFinishFlag", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sendTaskFinishFlagAsync(string in0) {
            this.sendTaskFinishFlagAsync(in0, null);
        }
        
        /// <remarks/>
        public void sendTaskFinishFlagAsync(string in0, object userState) {
            if ((this.sendTaskFinishFlagOperationCompleted == null)) {
                this.sendTaskFinishFlagOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendTaskFinishFlagOperationCompleted);
            }
            this.InvokeAsync("sendTaskFinishFlag", new object[] {
                        in0}, this.sendTaskFinishFlagOperationCompleted, userState);
        }
        
        private void OnsendTaskFinishFlagOperationCompleted(object arg) {
            if ((this.sendTaskFinishFlagCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendTaskFinishFlagCompleted(this, new sendTaskFinishFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.mpac.nari.com", ResponseNamespace="http://webservice.mpac.nari.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string applyAssistEquip([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("applyAssistEquip", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void applyAssistEquipAsync(string in0) {
            this.applyAssistEquipAsync(in0, null);
        }
        
        /// <remarks/>
        public void applyAssistEquipAsync(string in0, object userState) {
            if ((this.applyAssistEquipOperationCompleted == null)) {
                this.applyAssistEquipOperationCompleted = new System.Threading.SendOrPostCallback(this.OnapplyAssistEquipOperationCompleted);
            }
            this.InvokeAsync("applyAssistEquip", new object[] {
                        in0}, this.applyAssistEquipOperationCompleted, userState);
        }
        
        private void OnapplyAssistEquipOperationCompleted(object arg) {
            if ((this.applyAssistEquipCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.applyAssistEquipCompleted(this, new applyAssistEquipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.mpac.nari.com", ResponseNamespace="http://webservice.mpac.nari.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string getDETedTestData([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("getDETedTestData", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDETedTestDataAsync(string in0) {
            this.getDETedTestDataAsync(in0, null);
        }
        
        /// <remarks/>
        public void getDETedTestDataAsync(string in0, object userState) {
            if ((this.getDETedTestDataOperationCompleted == null)) {
                this.getDETedTestDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDETedTestDataOperationCompleted);
            }
            this.InvokeAsync("getDETedTestData", new object[] {
                        in0}, this.getDETedTestDataOperationCompleted, userState);
        }
        
        private void OngetDETedTestDataOperationCompleted(object arg) {
            if ((this.getDETedTestDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDETedTestDataCompleted(this, new getDETedTestDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.mpac.nari.com", ResponseNamespace="http://webservice.mpac.nari.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string setResults([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("setResults", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void setResultsAsync(string in0) {
            this.setResultsAsync(in0, null);
        }
        
        /// <remarks/>
        public void setResultsAsync(string in0, object userState) {
            if ((this.setResultsOperationCompleted == null)) {
                this.setResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetResultsOperationCompleted);
            }
            this.InvokeAsync("setResults", new object[] {
                        in0}, this.setResultsOperationCompleted, userState);
        }
        
        private void OnsetResultsOperationCompleted(object arg) {
            if ((this.setResultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setResultsCompleted(this, new setResultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.mpac.nari.com", ResponseNamespace="http://webservice.mpac.nari.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string getMachineHandInfo([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("getMachineHandInfo", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getMachineHandInfoAsync(string in0) {
            this.getMachineHandInfoAsync(in0, null);
        }
        
        /// <remarks/>
        public void getMachineHandInfoAsync(string in0, object userState) {
            if ((this.getMachineHandInfoOperationCompleted == null)) {
                this.getMachineHandInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMachineHandInfoOperationCompleted);
            }
            this.InvokeAsync("getMachineHandInfo", new object[] {
                        in0}, this.getMachineHandInfoOperationCompleted, userState);
        }
        
        private void OngetMachineHandInfoOperationCompleted(object arg) {
            if ((this.getMachineHandInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMachineHandInfoCompleted(this, new getMachineHandInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.mpac.nari.com", ResponseNamespace="http://webservice.mpac.nari.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string applyEquip([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("applyEquip", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void applyEquipAsync(string in0) {
            this.applyEquipAsync(in0, null);
        }
        
        /// <remarks/>
        public void applyEquipAsync(string in0, object userState) {
            if ((this.applyEquipOperationCompleted == null)) {
                this.applyEquipOperationCompleted = new System.Threading.SendOrPostCallback(this.OnapplyEquipOperationCompleted);
            }
            this.InvokeAsync("applyEquip", new object[] {
                        in0}, this.applyEquipOperationCompleted, userState);
        }
        
        private void OnapplyEquipOperationCompleted(object arg) {
            if ((this.applyEquipCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.applyEquipCompleted(this, new applyEquipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.mpac.nari.com", ResponseNamespace="http://webservice.mpac.nari.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string getDBConnInfo() {
            object[] results = this.Invoke("getDBConnInfo", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDBConnInfoAsync() {
            this.getDBConnInfoAsync(null);
        }
        
        /// <remarks/>
        public void getDBConnInfoAsync(object userState) {
            if ((this.getDBConnInfoOperationCompleted == null)) {
                this.getDBConnInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDBConnInfoOperationCompleted);
            }
            this.InvokeAsync("getDBConnInfo", new object[0], this.getDBConnInfoOperationCompleted, userState);
        }
        
        private void OngetDBConnInfoOperationCompleted(object arg) {
            if ((this.getDBConnInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDBConnInfoCompleted(this, new getDBConnInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.mpac.nari.com", ResponseNamespace="http://webservice.mpac.nari.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string equipCheckInfo([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("equipCheckInfo", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void equipCheckInfoAsync(string in0) {
            this.equipCheckInfoAsync(in0, null);
        }
        
        /// <remarks/>
        public void equipCheckInfoAsync(string in0, object userState) {
            if ((this.equipCheckInfoOperationCompleted == null)) {
                this.equipCheckInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnequipCheckInfoOperationCompleted);
            }
            this.InvokeAsync("equipCheckInfo", new object[] {
                        in0}, this.equipCheckInfoOperationCompleted, userState);
        }
        
        private void OnequipCheckInfoOperationCompleted(object arg) {
            if ((this.equipCheckInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.equipCheckInfoCompleted(this, new equipCheckInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.mpac.nari.com", ResponseNamespace="http://webservice.mpac.nari.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string boxCheckInfo([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("boxCheckInfo", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void boxCheckInfoAsync(string in0) {
            this.boxCheckInfoAsync(in0, null);
        }
        
        /// <remarks/>
        public void boxCheckInfoAsync(string in0, object userState) {
            if ((this.boxCheckInfoOperationCompleted == null)) {
                this.boxCheckInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnboxCheckInfoOperationCompleted);
            }
            this.InvokeAsync("boxCheckInfo", new object[] {
                        in0}, this.boxCheckInfoOperationCompleted, userState);
        }
        
        private void OnboxCheckInfoOperationCompleted(object arg) {
            if ((this.boxCheckInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.boxCheckInfoCompleted(this, new boxCheckInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.mpac.nari.com", ResponseNamespace="http://webservice.mpac.nari.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string upBoxInputPileDet([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("upBoxInputPileDet", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void upBoxInputPileDetAsync(string in0) {
            this.upBoxInputPileDetAsync(in0, null);
        }
        
        /// <remarks/>
        public void upBoxInputPileDetAsync(string in0, object userState) {
            if ((this.upBoxInputPileDetOperationCompleted == null)) {
                this.upBoxInputPileDetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupBoxInputPileDetOperationCompleted);
            }
            this.InvokeAsync("upBoxInputPileDet", new object[] {
                        in0}, this.upBoxInputPileDetOperationCompleted, userState);
        }
        
        private void OnupBoxInputPileDetOperationCompleted(object arg) {
            if ((this.upBoxInputPileDetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.upBoxInputPileDetCompleted(this, new upBoxInputPileDetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.mpac.nari.com", ResponseNamespace="http://webservice.mpac.nari.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string getAlarm([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("getAlarm", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getAlarmAsync(string in0) {
            this.getAlarmAsync(in0, null);
        }
        
        /// <remarks/>
        public void getAlarmAsync(string in0, object userState) {
            if ((this.getAlarmOperationCompleted == null)) {
                this.getAlarmOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAlarmOperationCompleted);
            }
            this.InvokeAsync("getAlarm", new object[] {
                        in0}, this.getAlarmOperationCompleted, userState);
        }
        
        private void OngetAlarmOperationCompleted(object arg) {
            if ((this.getAlarmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAlarmCompleted(this, new getAlarmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://webservice.mpac.nari.com", ResponseNamespace="http://webservice.mpac.nari.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string uploadPackInfo([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0) {
            object[] results = this.Invoke("uploadPackInfo", new object[] {
                        in0});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void uploadPackInfoAsync(string in0) {
            this.uploadPackInfoAsync(in0, null);
        }
        
        /// <remarks/>
        public void uploadPackInfoAsync(string in0, object userState) {
            if ((this.uploadPackInfoOperationCompleted == null)) {
                this.uploadPackInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnuploadPackInfoOperationCompleted);
            }
            this.InvokeAsync("uploadPackInfo", new object[] {
                        in0}, this.uploadPackInfoOperationCompleted, userState);
        }
        
        private void OnuploadPackInfoOperationCompleted(object arg) {
            if ((this.uploadPackInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.uploadPackInfoCompleted(this, new uploadPackInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void getSealInfoCompletedEventHandler(object sender, getSealInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSealInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSealInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void uploadLabelCompletedEventHandler(object sender, uploadLabelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class uploadLabelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal uploadLabelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void sendCtrlTaskFinishFlagCompletedEventHandler(object sender, sendCtrlTaskFinishFlagCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendCtrlTaskFinishFlagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendCtrlTaskFinishFlagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void uploadSealsCodeCompletedEventHandler(object sender, uploadSealsCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class uploadSealsCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal uploadSealsCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void sendTaskFinishFlagCompletedEventHandler(object sender, sendTaskFinishFlagCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendTaskFinishFlagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendTaskFinishFlagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void applyAssistEquipCompletedEventHandler(object sender, applyAssistEquipCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class applyAssistEquipCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal applyAssistEquipCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void getDETedTestDataCompletedEventHandler(object sender, getDETedTestDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDETedTestDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDETedTestDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void setResultsCompletedEventHandler(object sender, setResultsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setResultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setResultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void getMachineHandInfoCompletedEventHandler(object sender, getMachineHandInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMachineHandInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMachineHandInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void applyEquipCompletedEventHandler(object sender, applyEquipCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class applyEquipCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal applyEquipCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void getDBConnInfoCompletedEventHandler(object sender, getDBConnInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDBConnInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDBConnInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void equipCheckInfoCompletedEventHandler(object sender, equipCheckInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class equipCheckInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal equipCheckInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void boxCheckInfoCompletedEventHandler(object sender, boxCheckInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class boxCheckInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal boxCheckInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void upBoxInputPileDetCompletedEventHandler(object sender, upBoxInputPileDetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class upBoxInputPileDetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal upBoxInputPileDetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void getAlarmCompletedEventHandler(object sender, getAlarmCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAlarmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAlarmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void uploadPackInfoCompletedEventHandler(object sender, uploadPackInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class uploadPackInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal uploadPackInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591